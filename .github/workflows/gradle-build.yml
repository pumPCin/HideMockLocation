# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Gradle Build

on:
  workflow_dispatch:
  push:
    branches: ["main"]
    
permissions: write-all

env:
  APP_NAME: HideMockLocation

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Input Check
      run: |
        echo "github.event_name : ${{ github.event_name }}"
        echo "github.event.action : ${{ github.event.action }}"
        echo "github.ref : ${{ github.ref }}"
        echo "github.event.pull_request.merged : ${{ github.event.pull_request.merged }}"
        echo "github.event.number : ${{ github.event.number }}"

    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Get Latest Release Tag
      working-directory : ${{ github.workspace }}/app
      run : |
        echo "Get Latest Release Tag"
        LATESTRELEASETAG='220'
        echo "$LATESTRELEASETAG"
        echo "LATESTRELEASETAG=$LATESTRELEASETAG" >> $GITHUB_ENV
    
    - name: Create Latest Release TXT File
      working-directory : ${{ github.workspace }}/app
      run : |
        echo "Create Latest Release TXT File"
        echo "${{ env.LATESTRELEASETAG }}" > LatestReleaseTag.txt
    
    - name: Get Gradle VersionName
      working-directory : ${{ github.workspace }}/app
      run : |
        echo "Get Gradle VersionName"
        VERSIONNAME='2.2.0'
        echo "$VERSIONNAME"
        echo "VERSIONNAME=$VERSIONNAME" >> $GITHUB_ENV
  
    - name: Create Gradle VersionName TXT File
      working-directory : ${{ github.workspace }}/app
      run : |
        echo "Create Gradle VersionName TXT File"
        echo "${{ env.VERSIONNAME }}" > VersionName.txt

    - name: Check If Gradle Version Equals Latest Release Tag
      working-directory : ${{ github.workspace }}/app
      run : |
        VERSIONNAME=${{ env.VERSIONNAME }}
        LATESTRELEASETAG=${{ env.LATESTRELEASETAG }}
        echo "Gradle Version Name: $VERSIONNAME"
        echo "Latest Release Tag: $LATESTRELEASETAG"
        if [ "$VERSIONNAME" = "$LATESTRELEASETAG" ]; then echo "Current Gradle Version is the same as GitHubs latest Release tag. This will create a tagging conflict when PR is merged due to every PR creating a release. This can be resolved by updating the build.gradle file."; exit 1; else echo "All clear!"; fi
           
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      with:
        cache-disabled: true
    
    - name: Make Gradlew Executable
      run: chmod +x ./gradlew
    
    - name: Execute Gradle build
      run: ./gradlew build
        
    - name : View Build Directory
      working-directory : ${{ github.workspace }}
      run : |
        echo "${{ github.workspace }}/app/build/outputs/apk/debug"
        ls -la ${{ github.workspace }}/app/build/outputs/apk/debug
        echo ""
        echo "${{ github.workspace }}/app/build/outputs/apk/release"
        ls -la ${{ github.workspace }}/app/build/outputs/apk/release

    - name: Rename APK
      working-directory : ${{ github.workspace }}/app/build/outputs/apk/release
      run: mv *.apk ${{ env.APP_NAME }}-${{ env.VERSIONNAME }}.apk

    - name: Upload Artifact APK
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-${{ env.VERSIONNAME }}.apk
        path: ${{ github.workspace }}/app/build/outputs/apk/release/${{ env.APP_NAME }}-${{ env.VERSIONNAME }}.apk
